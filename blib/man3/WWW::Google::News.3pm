.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "News 3"
.TH News 3 "2003-08-05" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
WWW::Google::News \- Access to Google's News Service (Not Usenet)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use WWW:Google::News qw(get_news);
\&  my $results = get_news();
.Ve
.PP
.Vb 1
\&  my $results = get_news_for_topic('impending asteriod impact');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a couple of methods to scrape results from Google News, returning 
a data structure similar to the following (which happens to be suitable to feeding into \s-1XML::RSS\s0).
.PP
.Vb 24
\&  {
\&    'Top Stories' =>
\&              [
\&               {
\&                 'url' => 'http://www.washingtonpost.com/wp-dyn/articles/A9707-2002Nov19.html',
\&                 'headline' => 'Amendment to Homeland Security Bill Defeated'
\&               },
\&               {
\&                 'url' => 'http://www.ananova.com/news/story/sm_712444.html',
\&                 'headline' => 'US and UN at odds as Iraq promises to meet deadline'
\&               }
\&              ],
\&    'Entertainment' =>
\&             [
\&              {
\&                'url' => 'http://abcnews.go.com/sections/entertainment/DailyNews/Coburn021119.html',
\&                'headline' => 'James Coburn Dies'
\&              },
\&              {
\&                'url' => 'http://www.cbsnews.com/stories/2002/11/15/entertainment/main529532.shtml',
\&                'headline' => '007s On Parade At \e'Die\e' Premiere'
\&              }
\&             ]
\&   }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIget_news()\fR" 4
.IX Item "get_news()"
Scrapes <http://news.google.com/news/gnmainlite.html> and returns a reference 
to a hash keyed on News Section, which points to an array of hashes keyed on \s-1URL\s0 and Headline.
.ie n .IP "get_news_for_topic( $topic )" 4
.el .IP "get_news_for_topic( \f(CW$topic\fR )" 4
.IX Item "get_news_for_topic( $topic )"
Queries <http://news.google.com/news> for results on a particular topic, 
and returns a pointer to an array of hashes containing result data. 
.Sp
An \s-1RSS\s0 feed can be constructed from this very easily:
.Sp
.Vb 2
\&        use WWW::Google::News;
\&        use XML::RSS;
.Ve
.Sp
.Vb 11
\&        $results = get_news_for_topic( $topic )
\&        my $rss = XML::RSS->new;
\&        $rss->channel(title => "Google News -- $topic");
\&        for (@{$results}) {
\&                $rss->add_item(
\&                        title => $_->{headline},
\&                        link  => $_->{url},
\&                        description  => $_->{description},
\&                );
\&        }
\&        print $rss->as_string;
.Ve
.IP "\fIget_news_greg_style()\fR" 4
.IX Item "get_news_greg_style()"
It also provides a method called \fIget_news_greg_style()\fR which returns the same data, only
using a hash keyed on story number instead of the array described in the above.
.SH "TODO"
.IX Header "TODO"
* Implement an example \s-1RSS\s0 feed. \*(-- Done, see above
.Sp
* Seek out a good psychologist so we can work through Greg's obsession with hashes.
.SH "AUTHORS"
.IX Header "AUTHORS"
Greg McCarroll <greg@mccarroll.demon.co.uk>, Bowen Dwelle <bowen@dwelle.org>
.SH "KUDOS"
.IX Header "KUDOS"
Darren Chamberlain for rss_alternate.pl
.Sp
Leon Brocard for pulling me up on my obsessive compulsion to use
hashes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://news.google.com/>
<http://news.google.com/news/gnmainlite.html>
